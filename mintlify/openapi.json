{
  "openapi": "3.0.0",
  "info": {
    "title": "Arqqin Parking Management API",
    "description": "Comprehensive API for property management companies to register, manage locations, and control parking access through vehicle whitelists. The API supports company onboarding, location management, and reference-based vehicle whitelist system.",
    "version": "1.4.0",
    "contact": {
      "name": "Arqqin Support",
      "email": "hello@arqqin.com",
      "url": "https://support.arqq.in"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://apistg.arqq.in/api",
      "description": "Staging Environment"
    },
    {
      "url": "https://api.arqq.in/api",
      "description": "Production Environment"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/register/company": {
      "post": {
        "tags": ["Company Management"],
        "summary": "Register Company",
        "description": "Registers a new property management company with the system. This endpoint does not require authentication as it's used for initial company onboarding.",
        "operationId": "registerCompany",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyRegistrationRequest"
              },
              "examples": {
                "complete": {
                  "summary": "Complete company registration",
                  "value": {
                    "name": "Downtown Property Management",
                    "slug": "downtown-pm",
                    "externalCompanyId": "EXT_12345",
                    "description": "Premium property management services",
                    "address": "123 Business Street, Dubai",
                    "phone": "+1234567890",
                    "email": "contact@downtownpm.com",
                    "website": "https://downtownpm.com",
                    "logo": "https://storage.example.com/logo.png",
                    "settings": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["System"],
        "summary": "Health Check",
        "description": "Returns API health status and service information",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "examples": {
                  "healthy": {
                    "summary": "Healthy service response",
                    "value": {
                      "status": "healthy",
                      "timestamp": "2024-01-20T16:30:00Z",
                      "service": "arqqin-parking-management",
                      "version": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["Locations"],
        "summary": "List Locations",
        "description": "Returns all locations accessible by the API key",
        "operationId": "listLocations",
        "responses": {
          "200": {
            "description": "List of accessible locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      },
      "post": {
        "tags": ["Location Management"],
        "summary": "Add Location",
        "description": "Creates a new location for the authenticated company. Requires API key authentication.",
        "operationId": "addLocation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationRequest"
              },
              "examples": {
                "complete": {
                  "summary": "Complete location data",
                  "value": {
                    "name": "Sunset Towers",
                    "slug": "sunset-towers",
                    "referenceId": "PROP_001",
                    "description": "Luxury residential complex with premium amenities",
                    "address": "456 Sunset Boulevard, Dubai Marina",
                    "city": "Dubai",
                    "state": "Dubai",
                    "country": "UAE",
                    "postalCode": "12345",
                    "coordinates": {
                      "lat": 25.0772,
                      "lng": 55.1409
                    },
                    "timezone": "Asia/Dubai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        }
      }
    },
    "/locations/status": {
      "get": {
        "tags": ["Location Management"],
        "summary": "Get Bulk Location Status",
        "description": "Returns current status and statistics for all locations accessible by the API key. This provides a company-wide overview of parking status across all managed properties.",
        "operationId": "getBulkLocationStatus",
        "responses": {
          "200": {
            "description": "Bulk location status for all company locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkLocationStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get Location Details",
        "description": "Returns detailed information about a specific location",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationDetailResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      },
      "put": {
        "tags": ["Location Management"],
        "summary": "Update Location",
        "description": "Updates an existing location's information. API key must have permission to modify the location.",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location to update",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUpdateRequest"
              },
              "examples": {
                "update_basic": {
                  "summary": "Update basic location info",
                  "value": {
                    "name": "Sunset Towers Updated",
                    "address": "456 Sunset Boulevard (New Wing), Dubai Marina",
                    "city": "Dubai",
                    "country": "UAE"
                  }
                },
                "update_complete": {
                  "summary": "Complete location update",
                  "value": {
                    "name": "Sunset Towers Residence",
                    "slug": "sunset-towers-residence",
                    "description": "Updated luxury residential complex with premium amenities",
                    "address": "456 Sunset Boulevard (Renovated), Dubai Marina",
                    "city": "Dubai",
                    "state": "Dubai",
                    "country": "UAE",
                    "postalCode": "54321",
                    "coordinates": {
                      "lat": 25.0773,
                      "lng": 55.1410
                    },
                    "timezone": "Asia/Dubai"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError"
          }
        }
      }
    },
    "/locations/{locationId}/status": {
      "get": {
        "tags": ["Locations"],
        "summary": "Get Location Status",
        "description": "Returns current status and statistics for a location",
        "operationId": "getLocationStatus",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location status and statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationStatusResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/locations/{locationId}/whitelist": {
      "get": {
        "tags": ["Whitelist"],
        "summary": "List Whitelist Vehicles",
        "description": "Returns whitelist vehicles for a location, optionally filtered by various criteria",
        "operationId": "listWhitelistVehicles",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          },
          {
            "name": "referenceId",
            "in": "query",
            "required": false,
            "description": "Filter by a specific external reference (e.g., residents, tenants, etc.)",
            "schema": {
              "type": "string",
              "example": "REF_001"
            }
          },
          {
            "name": "plateType",
            "in": "query",
            "required": false,
            "description": "Filter by plate type (e.g., DXB, KSA)",
            "schema": {
              "type": "string",
              "example": "DXB"
            }
          },
          {
            "name": "plateCode",
            "in": "query",
            "required": false,
            "description": "Filter by plate code/color (e.g., White, A, ABC, 123)",
            "schema": {
              "type": "string",
              "example": "White"
            }
          },
          {
            "name": "plateNumber",
            "in": "query",
            "required": false,
            "description": "Digits-only plate number (e.g., 12345, 123)",
            "schema": {
              "type": "string",
              "pattern": "^\\d+$",
              "example": "12345"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of items to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50,
              "example": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of whitelist vehicles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelistListResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "post": {
        "tags": ["Whitelist"],
        "summary": "Add Whitelist Vehicle",
        "description": "Adds a new vehicle to the whitelist for a specific location, associated with a referenceId",
        "operationId": "addWhitelistVehicle",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhitelistVehicleRequest"
              },
              "examples": {
                "basic": {
                  "summary": "Basic vehicle whitelist entry",
                  "value": {
                    "referenceId": "REF_001",
                    "plateType": "DXB",
                    "plateCode": "White",
                    "plateNumber": "67890",
                    "vehicleType": "SUV",
                    "note": "Second vehicle"
                  }
                },
                "minimal": {
                  "summary": "Minimal required fields",
                  "value": {
                    "referenceId": "REF_002",
                    "plateType": "AUH",
                    "plateCode": "A",
                    "plateNumber": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle added to whitelist successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelistVehicleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "description": "Vehicle already exists in whitelist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "duplicate": {
                    "summary": "Duplicate vehicle error",
                    "value": {
                      "success": false,
                      "error": {
                        "code": "DUPLICATE_VEHICLE",
                        "message": "Vehicle with this plate already exists in whitelist",
                        "details": {
                          "plateType": "DXB",
                          "plateCode": "White",
                          "plateNumber": "67890"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/whitelist/{whitelistId}": {
      "put": {
        "tags": ["Whitelist"],
        "summary": "Update Whitelist Vehicle",
        "description": "Updates an existing whitelist vehicle",
        "operationId": "updateWhitelistVehicle",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          },
          {
            "name": "whitelistId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the whitelist entry",
            "schema": {
              "type": "string",
              "example": "whitelist_789"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhitelistVehicleUpdateRequest"
              },
              "examples": {
                "update": {
                  "summary": "Update vehicle information",
                  "value": {
                    "referenceId": "REF_001",
                    "plateType": "DXB",
                    "plateCode": "A",
                    "plateNumber": "67890",
                    "vehicleType": "SUV",
                    "note": "Updated notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelistVehicleResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": ["Whitelist"],
        "summary": "Remove Whitelist Vehicle",
        "description": "Removes a vehicle from the location's whitelist",
        "operationId": "removeWhitelistVehicle",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the location",
            "schema": {
              "type": "string",
              "example": "location_123"
            }
          },
          {
            "name": "whitelistId",
            "in": "path",
            "required": true,
            "description": "Unique identifier for the whitelist entry",
            "schema": {
              "type": "string",
              "example": "whitelist_789"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                "examples": {
                  "removed": {
                    "summary": "Vehicle removed successfully",
                    "value": {
                      "success": true,
                      "message": "Vehicle removed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": ["Company Management"],
        "summary": "List Companies",
        "description": "Returns all companies accessible by the API key based on the permissions granted.",
        "operationId": "listCompanies",
        "responses": {
          "200": {
            "description": "List of accessible companies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompaniesListResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/test": {
      "get": {
        "tags": ["Development"],
        "summary": "Test Endpoint",
        "description": "Development endpoint that returns sample data for testing purposes. Supports both XML and JSON formats.",
        "operationId": "testEndpoint",
        "security": [],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Format of test data to return",
            "schema": {
              "type": "string",
              "enum": ["json", "xml"],
              "default": "json",
              "example": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sample test data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Test data"
                    }
                  }
                },
                "examples": {
                  "sample_json": {
                    "summary": "Sample JSON test data",
                    "value": {
                      "message": "Test data for development",
                      "timestamp": "2025-01-20T10:30:00+04:00",
                      "status": "success"
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "xml"
                },
                "examples": {
                  "sample_xml": {
                    "summary": "Sample XML test data",
                    "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testData>\n  <message>Test data for development</message>\n  <timestamp>2025-01-20T10:30:00+04:00</timestamp>\n  <status>success</status>\n</testData>"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication. Contact hello@arqqin.com to obtain your API key."
      }
    },
    "schemas": {
      "WhitelistVehicle": {
        "type": "object",
        "required": ["id", "locationId", "referenceId", "plateType", "plateCode", "plateNumber", "addedAt", "updatedAt"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the whitelist entry",
            "example": "whitelist_789"
          },
          "locationId": {
            "type": "string",
            "description": "Location where whitelist entry applies",
            "example": "location_123"
          },
          "referenceId": {
            "type": "string",
            "description": "External reference (e.g., resident, contract, unit, fleet)",
            "example": "REF_001"
          },
          "plateType": {
            "type": "string",
            "description": "Issuing authority or region code (e.g., DXB, KSA)",
            "pattern": "^[A-Z]{2,4}$",
            "example": "DXB"
          },
          "plateCode": {
            "type": "string",
            "description": "'White' or 1-3 alphanumeric code (e.g., A, AB, 123)",
            "pattern": "^(White|[A-Za-z0-9]{1,3})$",
            "example": "White"
          },
          "plateNumber": {
            "type": "string",
            "description": "Digits-only license number (e.g., 12345)",
            "pattern": "^\\d+$",
            "example": "12345"
          },
          "vehicleType": {
            "type": "string",
            "description": "Vehicle type (e.g., Sedan, SUV)",
            "example": "SUV"
          },
          "note": {
            "type": "string",
            "description": "Optional note",
            "example": "Preferred entrance: Gate A"
          },
          "addedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when vehicle was added",
            "example": "2024-01-20T16:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when vehicle was last updated",
            "example": "2024-01-20T16:30:00Z"
          }
        }
      },
      "WhitelistVehicleRequest": {
        "type": "object",
        "required": ["referenceId", "plateType", "plateCode", "plateNumber"],
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "External reference (e.g., resident, contract, unit, fleet)",
            "example": "REF_001"
          },
          "plateType": {
            "type": "string",
            "description": "Issuing authority or region code (e.g., DXB, KSA)",
            "pattern": "^[A-Z]{2,4}$",
            "example": "DXB"
          },
          "plateCode": {
            "type": "string",
            "description": "'White' or 1-3 alphanumeric code (e.g., A, AB, 123)",
            "pattern": "^(White|[A-Za-z0-9]{1,3})$",
            "example": "White"
          },
          "plateNumber": {
            "type": "string",
            "description": "Digits-only license number (e.g., 12345)",
            "pattern": "^\\d+$",
            "example": "67890"
          },
          "vehicleType": {
            "type": "string",
            "description": "Vehicle type (e.g., Sedan, SUV)",
            "example": "SUV"
          },
          "note": {
            "type": "string",
            "description": "Optional note",
            "example": "Second vehicle"
          }
        }
      },
      "WhitelistVehicleUpdateRequest": {
        "type": "object",
        "required": ["referenceId", "plateType", "plateCode", "plateNumber"],
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "External reference (e.g., resident, contract, unit, fleet)",
            "example": "REF_001"
          },
          "plateType": {
            "type": "string",
            "description": "Issuing authority or region code (e.g., DXB, KSA)",
            "pattern": "^[A-Z]{2,4}$",
            "example": "DXB"
          },
          "plateCode": {
            "type": "string",
            "description": "'White' or 1-3 alphanumeric code (e.g., A, AB, 123)",
            "pattern": "^(White|[A-Za-z0-9]{1,3})$",
            "example": "A"
          },
          "plateNumber": {
            "type": "string",
            "description": "Digits-only license number (e.g., 12345)",
            "pattern": "^\\d+$",
            "example": "67890"
          },
          "vehicleType": {
            "type": "string",
            "description": "Vehicle type (e.g., Sedan, SUV)",
            "example": "SUV"
          },
          "note": {
            "type": "string",
            "description": "Optional note",
            "example": "Updated notes"
          }
        }
      },
      "Location": {
        "type": "object",
        "required": ["id", "name", "address", "city", "country", "parkingCapacity", "isActive", "createdAt"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the location",
            "example": "location_123"
          },
          "name": {
            "type": "string",
            "description": "Location name",
            "example": "Downtown Residences"
          },
          "description": {
            "type": "string",
            "description": "Location description",
            "example": "Luxury residential complex in downtown Dubai"
          },
          "address": {
            "type": "string",
            "description": "Street address",
            "example": "123 Main Street, Dubai"
          },
          "city": {
            "type": "string",
            "description": "City name",
            "example": "Dubai"
          },
          "state": {
            "type": "string",
            "description": "State or emirate",
            "example": "Dubai"
          },
          "country": {
            "type": "string",
            "description": "Country code",
            "example": "UAE"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "12345"
          },
          "coordinates": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "format": "double",
                "description": "Latitude",
                "example": 25.2048
              },
              "lng": {
                "type": "number",
                "format": "double",
                "description": "Longitude",
                "example": 55.2708
              }
            }
          },
          "timezone": {
            "type": "string",
            "description": "Timezone identifier",
            "example": "Asia/Dubai"
          },
          "parkingCapacity": {
            "type": "integer",
            "description": "Total parking capacity",
            "example": 150
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether location is active",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when location was created",
            "example": "2024-01-15T10:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp when location was last updated",
            "example": "2024-01-15T10:00:00Z"
          }
        }
      },
      "Gate": {
        "type": "object",
        "required": ["id", "name", "type", "isActive"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the gate",
            "example": "gate_1"
          },
          "name": {
            "type": "string",
            "description": "Gate name",
            "example": "Main Entrance"
          },
          "type": {
            "type": "string",
            "enum": ["entry", "exit"],
            "description": "Gate type",
            "example": "entry"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether gate is active",
            "example": true
          }
        }
      },
      "LocationStatus": {
        "type": "object",
        "required": ["totalCapacity", "currentOccupancy", "availableSpaces", "occupancyRate", "activeSessions", "gates", "lastUpdated"],
        "properties": {
          "totalCapacity": {
            "type": "integer",
            "description": "Total parking capacity",
            "example": 150
          },
          "currentOccupancy": {
            "type": "integer",
            "description": "Current number of occupied spaces",
            "example": 89
          },
          "availableSpaces": {
            "type": "integer",
            "description": "Number of available spaces",
            "example": 61
          },
          "occupancyRate": {
            "type": "string",
            "description": "Occupancy rate as percentage",
            "example": "59.3%"
          },
          "activeSessions": {
            "type": "integer",
            "description": "Number of active parking sessions",
            "example": 89
          },
          "gates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gate"
            },
            "description": "List of gates at the location"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of last status update",
            "example": "2024-01-20T16:30:00Z"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "required": ["status", "timestamp", "service", "version"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy", "degraded", "unhealthy"],
            "description": "Service health status",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of health check",
            "example": "2024-01-20T16:30:00Z"
          },
          "service": {
            "type": "string",
            "description": "Service name",
            "example": "arqqin-parking-management"
          },
          "version": {
            "type": "string",
            "description": "Service version",
            "example": "1.0.0"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Vehicle removed successfully"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["success", "error"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful",
            "example": false
          },
          "error": {
            "type": "object",
            "required": ["code", "message"],
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "VALIDATION_ERROR"
              },
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Invalid plate number format"
              },
              "details": {
                "type": "object",
                "description": "Additional error details",
                "example": {
                  "field": "plateNumber",
                  "value": "INVALID_PLATE"
                }
              }
            }
          }
        }
      },
      "LocationListResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            }
          }
        }
      },
      "LocationDetailResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "LocationStatusResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/LocationStatus"
          }
        }
      },
      "WhitelistListResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistVehicle"
            }
          }
        }
      },
      "WhitelistVehicleResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/WhitelistVehicle"
          }
        }
      },
      "CompanyRegistrationRequest": {
        "type": "object",
        "required": ["name", "slug", "address"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9\\s\\-&.,()]+$",
            "description": "Company name (1-100 characters, alphanumeric with spaces and common symbols)",
            "example": "Downtown Property Management"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly company identifier (lowercase letters, numbers, hyphens only). Cannot start/end with hyphens or contain consecutive hyphens.",
            "example": "downtown-pm"
          },
          "externalCompanyId": {
            "type": "string",
            "maxLength": 50,
            "description": "External system reference ID (optional, max 50 characters)",
            "example": "EXT_12345"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Company description (optional, max 500 characters)",
            "example": "Premium property management services"
          },
          "address": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Company business address (required, max 200 characters)",
            "example": "123 Business Street, Dubai"
          },
          "phone": {
            "type": "string",
            "maxLength": 20,
            "description": "Company phone number (optional, max 20 characters)",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Company email address (optional, must be valid email or empty string)",
            "example": "contact@downtownpm.com"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Company website URL (optional, must be valid URL or empty string)",
            "example": "https://downtownpm.com"
          },
          "logo": {
            "type": "string",
            "format": "uri",
            "description": "Company logo URL (optional, must be valid URL or empty string)",
            "example": "https://storage.example.com/logo.png"
          },
          "settings": {
            "type": "object",
            "description": "Company-specific settings (optional)",
            "example": {}
          }
        }
      },
      "CompanyRegistrationResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "required": ["companyId", "companyName", "companySlug", "adminEmail", "adminUserId"],
            "properties": {
              "companyId": {
                "type": "string",
                "description": "Unique company identifier",
                "example": "k17abc123def456ghi789jkl012mno345"
              },
              "companyName": {
                "type": "string",
                "description": "Company name",
                "example": "Downtown Property Management"
              },
              "companySlug": {
                "type": "string",
                "description": "Company slug",
                "example": "downtown-pm"
              },
              "adminEmail": {
                "type": "string",
                "description": "Admin email",
                "example": "admin@downtownpm.com"
              },
              "adminUserId": {
                "type": "string",
                "description": "Admin user identifier",
                "example": "k17def456ghi789jkl012mno345pqr678"
              }
            }
          }
        }
      },
      "LocationRequest": {
        "type": "object",
        "required": ["name", "slug", "address"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Location name",
            "example": "Sunset Towers"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly location identifier",
            "example": "sunset-towers"
          },
          "referenceId": {
            "type": "string",
            "maxLength": 50,
            "description": "External reference (property ID, etc.)",
            "example": "PROP_001"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Location description",
            "example": "Luxury residential complex with premium amenities"
          },
          "address": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Physical address",
            "example": "456 Sunset Boulevard, Dubai Marina"
          },
          "city": {
            "type": "string",
            "maxLength": 50,
            "description": "City name",
            "example": "Dubai"
          },
          "state": {
            "type": "string",
            "maxLength": 50,
            "description": "State/province",
            "example": "Dubai"
          },
          "country": {
            "type": "string",
            "maxLength": 50,
            "description": "Country name",
            "example": "UAE"
          },
          "postalCode": {
            "type": "string",
            "pattern": "^[A-Za-z0-9\\s-]{2,10}$",
            "description": "Postal/ZIP code",
            "example": "12345"
          },
          "coordinates": {
            "type": "object",
            "required": ["lat", "lng"],
            "properties": {
              "lat": {
                "type": "number",
                "minimum": -90,
                "maximum": 90,
                "description": "Latitude",
                "example": 25.0772
              },
              "lng": {
                "type": "number",
                "minimum": -180,
                "maximum": 180,
                "description": "Longitude",
                "example": 55.1409
              }
            }
          },
          "timezone": {
            "type": "string",
            "pattern": "^[A-Za-z_\\/]+$",
            "description": "Timezone identifier",
            "example": "Asia/Dubai"
          }
        }
      },
      "LocationUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Location name",
            "example": "Sunset Towers Updated"
          },
          "slug": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-z0-9-]+$",
            "description": "URL-friendly location identifier",
            "example": "sunset-towers-updated"
          },
          "referenceId": {
            "type": "string",
            "maxLength": 50,
            "description": "External reference (property ID, etc.)",
            "example": "PROP_001_UPDATED"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "Location description",
            "example": "Updated luxury residential complex with premium amenities"
          },
          "address": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "Physical address",
            "example": "456 Sunset Boulevard (Renovated), Dubai Marina"
          },
          "city": {
            "type": "string",
            "maxLength": 50,
            "description": "City name",
            "example": "Dubai"
          },
          "state": {
            "type": "string",
            "maxLength": 50,
            "description": "State/province",
            "example": "Dubai"
          },
          "country": {
            "type": "string",
            "maxLength": 50,
            "description": "Country name",
            "example": "UAE"
          },
          "postalCode": {
            "type": "string",
            "pattern": "^[A-Za-z0-9\\s-]{2,10}$",
            "description": "Postal/ZIP code",
            "example": "54321"
          },
          "coordinates": {
            "type": "object",
            "required": ["lat", "lng"],
            "properties": {
              "lat": {
                "type": "number",
                "minimum": -90,
                "maximum": 90,
                "description": "Latitude",
                "example": 25.0773
              },
              "lng": {
                "type": "number",
                "minimum": -180,
                "maximum": 180,
                "description": "Longitude",
                "example": 55.1410
              }
            }
          },
          "timezone": {
            "type": "string",
            "pattern": "^[A-Za-z_\\/]+$",
            "description": "Timezone identifier",
            "example": "Asia/Dubai"
          }
        }
      },
      "LocationResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "required": ["_id", "companyId", "name", "slug", "address", "isActive", "createdAt", "updatedAt"],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Location identifier",
                "example": "k17xyz789abc123def456ghi012jkl345"
              },
              "companyId": {
                "type": "string",
                "description": "Parent company identifier",
                "example": "k17abc123def456ghi789jkl012mno345"
              },
              "name": {
                "type": "string",
                "example": "Sunset Towers"
              },
              "slug": {
                "type": "string",
                "example": "sunset-towers"
              },
              "referenceId": {
                "type": "string",
                "example": "PROP_001"
              },
              "description": {
                "type": "string",
                "example": "Luxury residential complex"
              },
              "address": {
                "type": "string",
                "example": "456 Sunset Boulevard, Dubai Marina"
              },
              "city": {
                "type": "string",
                "example": "Dubai"
              },
              "state": {
                "type": "string",
                "example": "Dubai"
              },
              "country": {
                "type": "string",
                "example": "UAE"
              },
              "postalCode": {
                "type": "string",
                "example": "12345"
              },
              "coordinates": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number",
                    "example": 25.0772
                  },
                  "lng": {
                    "type": "number",
                    "example": 55.1409
                  }
                }
              },
              "timezone": {
                "type": "string",
                "example": "Asia/Dubai"
              },
              "isActive": {
                "type": "boolean",
                "example": true
              },
              "createdAt": {
                "type": "number",
                "example": 1705320000000
              },
              "updatedAt": {
                "type": "number",
                "example": 1705320000000
              }
            }
          }
        }
      },
      "BulkLocationStatusResponse": {
        "type": "object",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "required": ["companyId", "totalLocations", "locations", "lastUpdated"],
            "properties": {
              "companyId": {
                "type": "string",
                "description": "Company identifier",
                "example": "k17abc123def456ghi789jkl012mno345"
              },
              "totalLocations": {
                "type": "integer",
                "description": "Total number of locations",
                "example": 3
              },
              "locations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkLocationStatus"
                }
              },
              "lastUpdated": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp of last update",
                "example": "2024-01-20T16:30:00Z"
              }
            }
          }
        }
      },
      "BulkLocationStatus": {
        "type": "object",
        "required": ["locationId", "locationName", "locationSlug", "totalCapacity", "currentOccupancy", "availableSpaces", "occupancyRate", "activeSessions", "activeGates", "lastUpdated"],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location identifier",
            "example": "k17xyz789abc123def456ghi012jkl345"
          },
          "locationName": {
            "type": "string",
            "description": "Location display name",
            "example": "Downtown Residences"
          },
          "locationSlug": {
            "type": "string",
            "description": "Location URL-friendly identifier",
            "example": "downtown-residences"
          },
          "totalCapacity": {
            "type": "integer",
            "description": "Total parking spaces",
            "example": 150
          },
          "currentOccupancy": {
            "type": "integer",
            "description": "Currently occupied spaces",
            "example": 89
          },
          "availableSpaces": {
            "type": "integer",
            "description": "Available parking spaces",
            "example": 61
          },
          "occupancyRate": {
            "type": "string",
            "description": "Occupancy percentage",
            "example": "59.3%"
          },
          "activeSessions": {
            "type": "integer",
            "description": "Number of active parking sessions",
            "example": 89
          },
          "activeGates": {
            "type": "integer",
            "description": "Number of active entry/exit gates",
            "example": 4
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of last update",
            "example": "2024-01-20T16:30:00Z"
          }
        }
      },
      "CompaniesListResponse": {
        "type": "object",
        "description": "Response containing a list of companies accessible by the API key",
        "required": ["success", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            }
          }
        }
      },
      "Company": {
        "type": "object",
        "required": ["_id", "name", "slug", "isActive", "createdAt", "updatedAt"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique company identifier",
            "example": "k17abc123def456ghi789jkl012mno345"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Downtown Property Management"
          },
          "slug": {
            "type": "string",
            "description": "URL-friendly company identifier",
            "example": "downtown-pm"
          },
          "externalCompanyId": {
            "type": "string",
            "description": "External system reference ID",
            "example": "EXT_12345"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "Premium property management services"
          },
          "address": {
            "type": "string",
            "description": "Company business address",
            "example": "123 Business Street, Dubai"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Company email address",
            "example": "contact@downtownpm.com"
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Company website URL",
            "example": "https://downtownpm.com"
          },
          "logo": {
            "type": "string",
            "format": "uri",
            "description": "URL to company logo image",
            "example": "https://storage.example.com/logo.png"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the company is active",
            "example": true
          },
          "settings": {
            "type": "object",
            "description": "Company-specific settings",
            "example": {}
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the company",
            "example": "k17user123def456ghi789jkl012mno345"
          },
          "createdAt": {
            "type": "number",
            "description": "Unix timestamp when company was created",
            "example": 1705320000000
          },
          "updatedAt": {
            "type": "number",
            "description": "Unix timestamp when company was last updated",
            "example": 1705320000000
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Invalid or missing API key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "unauthorized": {
                "summary": "Unauthorized access",
                "value": {
                  "success": false,
                  "error": {
                    "code": "UNAUTHORIZED",
                    "message": "Invalid or missing API key"
                  }
                }
              }
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "API key doesn't have access to requested resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "forbidden": {
                "summary": "Access forbidden",
                "value": {
                  "success": false,
                  "error": {
                    "code": "FORBIDDEN",
                    "message": "API key doesn't have access to requested resource"
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "notFound": {
                "summary": "Resource not found",
                "value": {
                  "success": false,
                  "error": {
                    "code": "NOT_FOUND",
                    "message": "Resource not found"
                  }
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Invalid request data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "validation": {
                "summary": "Validation error",
                "value": {
                  "success": false,
                  "error": {
                    "code": "VALIDATION_ERROR",
                    "message": "Invalid plate number format",
                    "details": {
                      "field": "plateNumber",
                      "value": "INVALID_PLATE"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RateLimitError": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "rateLimit": {
                "summary": "Rate limit exceeded",
                "value": {
                  "success": false,
                  "error": {
                    "code": "RATE_LIMIT_EXCEEDED",
                    "message": "Too many requests"
                  }
                }
              }
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "internal": {
                "summary": "Internal server error",
                "value": {
                  "success": false,
                  "error": {
                    "code": "INTERNAL_ERROR",
                    "message": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      "ConflictError": {
        "description": "Resource conflict (e.g., duplicate company slug, location slug, or vehicle already in whitelist)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "conflict": {
                "summary": "Resource conflict",
                "value": {
                  "success": false,
                  "error": {
                    "code": "CONFLICT_ERROR",
                    "message": "Company slug already exists"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
